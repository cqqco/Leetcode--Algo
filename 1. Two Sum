1. Two Sum
Easy

18134

647

Add to List

Share
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.



Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Output: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]


Constraints:

2 <= nums.length <= 103
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.

----Answer
1. Brute Force
def twoSum(self, nums: List[int], target: int) -> List[int]:
    if not nums:
        return

    for i in range(len(nums)):
        for j in range(i+1,len(nums)):
            if nums[i] + nums[j] == target:
                return [i,j]
    return

2.Two Pass Hash Table
def twoSum(self, nums: List[int], target: int) -> List[int]:
    dict = {}
    
    for i in range(len(nums)):
        dict[nums[i]] = i

    for j in range(len(nums)):
        if target - nums[j] in dict and dict[target-nums[j]] != j:
            return [j,dict[target-nums[j]]]
    return
3.One Pass Hash Table
def twoSum(self, nums: List[int], target: int) -> List[int]:
    dict = {}
    for i, ele in enumerate(nums):
        if target - ele in dict:
            return [i,dict[target - ele]]
        else:
            dict[ele] = i
