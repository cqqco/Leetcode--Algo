53. Maximum Subarray
Easy

9864

476

Add to List

Share
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.



Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Example 2:

Input: nums = [1]
Output: 1
Example 3:

Input: nums = [0]
Output: 0
Example 4:

Input: nums = [-1]
Output: -1
Example 5:

Input: nums = [-2147483647]
Output: -2147483647

---answer
1. DP
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        if not nums:
            return

        max_res = nums[0]

        for i in range(1,len(nums)):
            if nums[i-1] >0:
                nums[i] += nums[i-1]
            max_res = max(nums[i],max_res)
        return max_res

2. Greedy

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        cur_sum = max_sum = nums[0]

        for i in range(1,len(nums)):
            cur_sum = max(nums[i], cur_sum + nums[i])
            max_sum = max(max_sum,cur_sum)
        return max_sum
3.My own Solution DP end with i
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        dp = [0 for i in range(len(nums))]

        dp[0] = nums[0]
        max_num = dp[0]
        for i in range(1,len(nums)):
            dp[i] = nums[i] + max(0,dp[i-1])
            max_num = max(max_num,dp[i])
        return max_num
